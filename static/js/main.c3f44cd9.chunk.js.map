{"version":3,"sources":["utilities.js","App.js","serviceWorker.js","index.js"],"names":["toTuple","_ref","y","x","drawPoint","ctx","r","color","name","score","beginPath","arc","Math","PI","fillStyle","fill","fillText","concat","drawSegment","_ref2","_ref3","scale","ay","ax","by","bx","moveTo","lineTo","lineWidth","strokeStyle","stroke","App","webcamRef","useRef","canvasRef","detect","async","current","video","readyState","videoWidth","videoHeight","width","height","pose","net","estimateSinglePose","console","log","drawCanvas","canvas","getContext","keypoints","minConfidence","arguments","length","undefined","i","keypoint","position","part","toFixed","drawKeypoints","adjacentKeyPoints","posenet","forEach","drawSkeleton","inputResolution","setInterval","runPosenet","React","createElement","className","Webcam","ref","style","marginLeft","marginRight","left","right","textAlign","zindex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c3f44cd9.chunk.js","sourcesContent":["/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport * as posenet from \"@tensorflow-models/posenet\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n\r\nconst color = \"aqua\";\r\nconst boundingBoxColor = \"red\";\r\nconst lineWidth = 2;\r\n\r\nexport const tryResNetButtonName = \"tryResNetButton\";\r\nexport const tryResNetButtonText = \"[New] Try ResNet50\";\r\nconst tryResNetButtonTextCss = \"width:100%;text-decoration:underline;\";\r\nconst tryResNetButtonBackgroundCss = \"background:#e61d5f;\";\r\n\r\nfunction isAndroid() {\r\n  return /Android/i.test(navigator.userAgent);\r\n}\r\n\r\nfunction isiOS() {\r\n  return /iPhone|iPad|iPod/i.test(navigator.userAgent);\r\n}\r\n\r\nexport function isMobile() {\r\n  return isAndroid() || isiOS();\r\n}\r\n\r\nfunction setDatGuiPropertyCss(propertyText, liCssString, spanCssString = \"\") {\r\n  var spans = document.getElementsByClassName(\"property-name\");\r\n  for (var i = 0; i < spans.length; i++) {\r\n    var text = spans[i].textContent || spans[i].innerText;\r\n    if (text === propertyText) {\r\n      spans[i].parentNode.parentNode.style = liCssString;\r\n      if (spanCssString !== \"\") {\r\n        spans[i].style = spanCssString;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function updateTryResNetButtonDatGuiCss() {\r\n  setDatGuiPropertyCss(\r\n    tryResNetButtonText,\r\n    tryResNetButtonBackgroundCss,\r\n    tryResNetButtonTextCss\r\n  );\r\n}\r\n\r\n/**\r\n * Toggles between the loading UI and the main canvas UI.\r\n */\r\nexport function toggleLoadingUI(\r\n  showLoadingUI,\r\n  loadingDivId = \"loading\",\r\n  mainDivId = \"main\"\r\n) {\r\n  if (showLoadingUI) {\r\n    document.getElementById(loadingDivId).style.display = \"block\";\r\n    document.getElementById(mainDivId).style.display = \"none\";\r\n  } else {\r\n    document.getElementById(loadingDivId).style.display = \"none\";\r\n    document.getElementById(mainDivId).style.display = \"block\";\r\n  }\r\n}\r\n\r\nfunction toTuple({ y, x }) {\r\n  return [y, x];\r\n}\r\n\r\nexport function drawPoint(ctx, y, x, r, color, name, score) {\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, r, 0, 2 * Math.PI);\r\n  ctx.fillStyle = color;\r\n  ctx.fill();\r\n  // Write part name\r\n  ctx.fillStyle = \"orange\";\r\n  ctx.fillText(name, x - 10, y - 10);\r\n  // Write part confidence\r\n  ctx.fillStyle = \"green\";\r\n  ctx.fillText(`Score: ${score}`, x - 10, y - 20);\r\n}\r\n\r\n/**\r\n * Draws a line on a canvas, i.e. a joint\r\n */\r\nexport function drawSegment([ay, ax], [by, bx], color, scale, ctx) {\r\n  ctx.beginPath();\r\n  ctx.moveTo(ax * scale, ay * scale);\r\n  ctx.lineTo(bx * scale, by * scale);\r\n  ctx.lineWidth = lineWidth;\r\n  ctx.strokeStyle = color;\r\n  ctx.stroke();\r\n}\r\n\r\n/**\r\n * Draws a pose skeleton by looking up all adjacent keypoints/joints\r\n */\r\nexport function drawSkeleton(keypoints, minConfidence, ctx, scale = 1) {\r\n  const adjacentKeyPoints = posenet.getAdjacentKeyPoints(\r\n    keypoints,\r\n    minConfidence\r\n  );\r\n\r\n  adjacentKeyPoints.forEach((keypoints) => {\r\n    drawSegment(\r\n      toTuple(keypoints[0].position),\r\n      toTuple(keypoints[1].position),\r\n      color,\r\n      scale,\r\n      ctx\r\n    );\r\n  });\r\n}\r\n\r\n/**\r\n * Draw pose keypoints onto a canvas\r\n */\r\nexport function drawKeypoints(keypoints, minConfidence, ctx, scale = 1) {\r\n  for (let i = 0; i < keypoints.length; i++) {\r\n    const keypoint = keypoints[i];\r\n\r\n    if (keypoint.score < minConfidence) {\r\n      continue;\r\n    }\r\n\r\n    const { y, x } = keypoint.position;\r\n    drawPoint(\r\n      ctx,\r\n      y * scale,\r\n      x * scale,\r\n      3,\r\n      color,\r\n      keypoint.part,\r\n      keypoint.score.toFixed(2)\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Draw the bounding box of a pose. For example, for a whole person standing\r\n * in an image, the bounding box will begin at the nose and extend to one of\r\n * ankles\r\n */\r\nexport function drawBoundingBox(keypoints, ctx) {\r\n  const boundingBox = posenet.getBoundingBox(keypoints);\r\n\r\n  ctx.rect(\r\n    boundingBox.minX,\r\n    boundingBox.minY,\r\n    boundingBox.maxX - boundingBox.minX,\r\n    boundingBox.maxY - boundingBox.minY\r\n  );\r\n\r\n  ctx.strokeStyle = boundingBoxColor;\r\n  ctx.stroke();\r\n}\r\n\r\n/**\r\n * Converts an arary of pixel data into an ImageData object\r\n */\r\nexport async function renderToCanvas(a, ctx) {\r\n  const [height, width] = a.shape;\r\n  const imageData = new ImageData(width, height);\r\n\r\n  const data = await a.data();\r\n\r\n  for (let i = 0; i < height * width; ++i) {\r\n    const j = i * 4;\r\n    const k = i * 3;\r\n\r\n    imageData.data[j + 0] = data[k + 0];\r\n    imageData.data[j + 1] = data[k + 1];\r\n    imageData.data[j + 2] = data[k + 2];\r\n    imageData.data[j + 3] = 255;\r\n  }\r\n\r\n  ctx.putImageData(imageData, 0, 0);\r\n}\r\n\r\n/**\r\n * Draw an image on a canvas\r\n */\r\nexport function renderImageToCanvas(image, size, canvas) {\r\n  canvas.width = size[0];\r\n  canvas.height = size[1];\r\n  const ctx = canvas.getContext(\"2d\");\r\n\r\n  ctx.drawImage(image, 0, 0);\r\n}\r\n\r\n/**\r\n * Draw heatmap values, one of the model outputs, on to the canvas\r\n * Read our blog post for a description of PoseNet's heatmap outputs\r\n * https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5\r\n */\r\nexport function drawHeatMapValues(heatMapValues, outputStride, canvas) {\r\n  const ctx = canvas.getContext(\"2d\");\r\n  const radius = 5;\r\n  const scaledValues = heatMapValues.mul(tf.scalar(outputStride, \"int32\"));\r\n\r\n  drawPoints(ctx, scaledValues, radius, color);\r\n}\r\n\r\n/**\r\n * Used by the drawHeatMapValues method to draw heatmap points on to\r\n * the canvas\r\n */\r\nfunction drawPoints(ctx, points, radius, color) {\r\n  const data = points.buffer().values;\r\n\r\n  for (let i = 0; i < data.length; i += 2) {\r\n    const pointY = data[i];\r\n    const pointX = data[i + 1];\r\n\r\n    if (pointX !== 0 && pointY !== 0) {\r\n      ctx.beginPath();\r\n      ctx.arc(pointX, pointY, radius, 0, 2 * Math.PI);\r\n      ctx.fillStyle = color;\r\n      ctx.fill();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Draw offset vector values, one of the model outputs, on to the canvas\r\n * Read our blog post for a description of PoseNet's offset vector outputs\r\n * https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5\r\n */\r\n// export function drawOffsetVectors(\r\n//     heatMapValues, offsets, outputStride, scale = 1, ctx) {\r\n//   const offsetPoints =\r\n//       posenet.singlePose.getOffsetPoints(heatMapValues, outputStride, offsets);\r\n\r\n//   const heatmapData = heatMapValues.buffer().values;\r\n//   const offsetPointsData = offsetPoints.buffer().values;\r\n\r\n//   for (let i = 0; i < heatmapData.length; i += 2) {\r\n//     const heatmapY = heatmapData[i] * outputStride;\r\n//     const heatmapX = heatmapData[i + 1] * outputStride;\r\n//     const offsetPointY = offsetPointsData[i];\r\n//     const offsetPointX = offsetPointsData[i + 1];\r\n\r\n//     drawSegment(\r\n//         [heatmapY, heatmapX], [offsetPointY, offsetPointX], color, scale, ctx);\r\n//   }\r\n// }\r\n","// 1. Install dependencies DONE\r\n// 2. Import dependencies DONE\r\n// 3. Setup webcam and canvas DONE\r\n// 4. Define references to those DONE\r\n// 5. Load posenet DONE\r\n// 6. Detect function DONE\r\n// 7. Drawing utilities from tensorflow DONE\r\n// 8. Draw functions DONE\r\n\r\nimport React, { useRef } from \"react\";\r\nimport \"./App.css\";\r\nimport * as posenet from \"@tensorflow-models/posenet\";\r\nimport Webcam from \"react-webcam\";\r\nimport { drawKeypoints, drawSkeleton } from \"./utilities\";\r\n\r\nfunction App() {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  //  Load posenet\r\n  const runPosenet = async () => {\r\n    const net = await posenet.load({\r\n      inputResolution: { width: 640, height: 480 },\r\n      scale: 0.5,\r\n    });\r\n    //\r\n    setInterval(() => {\r\n      detect(net);\r\n    }, 100);\r\n  };\r\n\r\n  const detect = async (net) => {\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      // Get Video Properties\r\n      const video = webcamRef.current.video;\r\n      const videoWidth = webcamRef.current.video.videoWidth;\r\n      const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n      // Set video width\r\n      webcamRef.current.video.width = videoWidth;\r\n      webcamRef.current.video.height = videoHeight;\r\n\r\n      // Make Detections\r\n      const pose = await net.estimateSinglePose(video);\r\n      console.log(pose);\r\n\r\n      drawCanvas(pose, video, videoWidth, videoHeight, canvasRef);\r\n    }\r\n  };\r\n\r\n  const drawCanvas = (pose, video, videoWidth, videoHeight, canvas) => {\r\n    const ctx = canvas.current.getContext(\"2d\");\r\n    canvas.current.width = videoWidth;\r\n    canvas.current.height = videoHeight;\r\n\r\n    drawKeypoints(pose[\"keypoints\"], 0.6, ctx);\r\n    drawSkeleton(pose[\"keypoints\"], 0.7, ctx);\r\n  };\r\n\r\n  runPosenet();\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Webcam\r\n          ref={webcamRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: 0,\r\n            marginRight: 20,\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: 0,\r\n            marginRight: 20,\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}